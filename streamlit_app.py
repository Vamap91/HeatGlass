#!/usr/bin/env python
import streamlit as st
from openai import OpenAI
import tempfile
import re
import json
import base64
from datetime import datetime
from fpdf import FPDF

# Inicializa o novo cliente da OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configura√ß√µes da p√°gina
st.set_page_config(page_title="HeatGlass", page_icon="üî¥", layout="centered")

# Fun√ß√£o para criar PDF
def create_pdf(analysis, transcript_text, model_name):
    pdf = FPDF()
    pdf.add_page()
    
    # Configura√ß√µes de fonte
    pdf.set_font("Arial", "B", 16)
    
    # Cabe√ßalho
    pdf.set_fill_color(193, 0, 0)
    pdf.set_text_color(255, 255, 255)
    pdf.cell(0, 10, "HeatGlass - Relat√≥rio de Atendimento", 1, 1, "C", True)
    pdf.ln(5)
    
    # Informa√ß√µes gerais
    pdf.set_text_color(0, 0, 0)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, f"Data da an√°lise: {datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 1)
    pdf.cell(0, 10, f"Modelo utilizado: {model_name}", 0, 1)
    pdf.ln(5)
    
    # Temperatura Emocional
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Temperatura Emocional", 0, 1)
    pdf.set_font("Arial", "", 12)
    temp = analysis.get("temperatura", {})
    pdf.cell(0, 10, f"Classifica√ß√£o: {temp.get('classificacao', 'N/A')}", 0, 1)
    pdf.multi_cell(0, 10, f"Justificativa: {temp.get('justificativa', 'N/A')}")
    pdf.ln(5)
    
    # Impacto Comercial
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Impacto Comercial", 0, 1)
    pdf.set_font("Arial", "", 12)
    impact = analysis.get("impacto_comercial", {})
    pdf.cell(0, 10, f"Percentual: {impact.get('percentual', 'N/A')}% - {impact.get('faixa', 'N/A')}", 0, 1)
    pdf.multi_cell(0, 10, f"Justificativa: {impact.get('justificativa', 'N/A')}")
    pdf.ln(5)
    
    # Status Final
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Status Final", 0, 1)
    pdf.set_font("Arial", "", 12)
    final = analysis.get("status_final", {})
    pdf.cell(0, 10, f"Cliente: {final.get('satisfacao', 'N/A')}", 0, 1)
    pdf.cell(0, 10, f"Desfecho: {final.get('desfecho', 'N/A')}", 0, 1)
    pdf.cell(0, 10, f"Risco: {final.get('risco', 'N/A')}", 0, 1)
    pdf.ln(5)
    
    # Script de Encerramento
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Script de Encerramento", 0, 1)
    pdf.set_font("Arial", "", 12)
    script_info = analysis.get("uso_script", {})
    pdf.cell(0, 10, f"Status: {script_info.get('status', 'N/A')}", 0, 1)
    pdf.multi_cell(0, 10, f"Justificativa: {script_info.get('justificativa', 'N/A')}")
    pdf.ln(5)
    
    # Pontua√ß√£o Total
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Pontua√ß√£o Total", 0, 1)
    pdf.set_font("Arial", "B", 12)
    total = analysis.get("pontuacao_total", "N/A")
    pdf.cell(0, 10, f"{total} pontos de 100", 0, 1)
    pdf.ln(5)
    
    # Resumo Geral
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Resumo Geral", 0, 1)
    pdf.set_font("Arial", "", 12)
    pdf.multi_cell(0, 10, analysis.get("resumo_geral", "N/A"))
    pdf.ln(5)
    
    # Checklist (nova p√°gina)
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Checklist T√©cnico", 0, 1)
    pdf.ln(5)
    
    # Itens do checklist
    checklist = analysis.get("checklist", [])
    for item in checklist:
        item_num = item.get('item', '')
        criterio = item.get('criterio', '')
        pontos = item.get('pontos', 0)
        resposta = str(item.get('resposta', ''))
        justificativa = item.get('justificativa', '')
        
        pdf.set_font("Arial", "B", 12)
        pdf.multi_cell(0, 10, f"{item_num}. {criterio} ({pontos} pts)")
        pdf.set_font("Arial", "", 12)
        pdf.cell(0, 10, f"Resposta: {resposta}", 0, 1)
        pdf.multi_cell(0, 10, f"Justificativa: {justificativa}")
        pdf.ln(5)
    
    # Transcri√ß√£o na √∫ltima p√°gina
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Transcri√ß√£o da Liga√ß√£o", 0, 1)
    pdf.set_font("Arial", "", 10)
    pdf.multi_cell(0, 10, transcript_text)
    
    return pdf.output(dest="S").encode("latin1")

# Fun√ß√£o para criar link de download do PDF
def get_pdf_download_link(pdf_bytes, filename):
    b64 = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">Baixar Relat√≥rio em PDF</a>'
    return href

# Estilo visual
st.markdown("""
<style>
h1, h2, h3 {
    color: #C10000 !important;
}
.result-box {
    background-color: #ffecec;
    padding: 1em;
    border-left: 5px solid #C10000;
    border-radius: 6px;
    font-size: 1rem;
    white-space: pre-wrap;
    line-height: 1.5;
}
.stButton>button {
    background-color: #C10000;
    color: white;
    font-weight: 500;
    border-radius: 6px;
    padding: 0.4em 1em;
    border: none;
}
.status-box {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #ffecec;
    border: 1px solid #C10000;
}
.script-usado {
    background-color: #e6ffe6;
    padding: 10px;
    border-left: 5px solid #00C100;
    border-radius: 6px;
    margin-bottom: 10px;
}
.script-parcial {
    background-color: #ffffcc;
    padding: 10px;
    border-left: 5px solid #FFD700;
    border-radius: 6px;
    margin-bottom: 10px;
}
.script-nao-usado {
    background-color: #ffcccc;
    padding: 10px;
    border-left: 5px solid #FF0000;
    border-radius: 6px;
    margin-bottom: 10px;
}
.criterio-sim {
    background-color: #e6ffe6;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #00C100;
}
.criterio-nao {
    background-color: #ffcccc;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #FF0000;
}
.criterio-parcial {
    background-color: #ffffcc;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #FFD700;
}
.criterio-nao-verificavel {
    background-color: #f0f0f0;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #808080;
}
.temperature-calm {
    color: #00C100;
    font-size: 1.5em;
}
.temperature-neutral {
    color: #FFD700;
    font-size: 1.5em;
}
.temperature-tense {
    color: #FFA500;
    font-size: 1.5em;
}
.temperature-very-tense {
    color: #FF0000;
    font-size: 1.5em;
}
.progress-high {
    color: #00C100;
}
.progress-medium {
    color: #FFD700;
}
.progress-low {
    color: #FF0000;
}
.criterio-eliminatorio {
    background-color: #ffcccc;
    padding: 10px;
    border-radius: 6px;
    margin-top: 20px;
    border: 2px solid #FF0000;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para determinar classe de temperatura
def get_temp_class(temp):
    if temp == "Calma":
        return "temperature-calm"
    elif temp == "Neutra":
        return "temperature-neutral"
    elif temp == "Tensa":
        return "temperature-tense"
    elif temp == "Muito Tensa":
        return "temperature-very-tense"
    else:
        return ""

# Fun√ß√£o para determinar classe de progresso
def get_progress_class(value):
    if value >= 70:
        return "progress-high"
    elif value >= 50:
        return "progress-medium"
    else:
        return "progress-low"

# Fun√ß√£o para verificar status do script
def get_script_status_class(status):
    if status.lower() == "completo" or status.lower() == "sim":
        return "script-usado"
    elif "parcial" in status.lower():
        return "script-parcial"
    else:
        return "script-nao-usado"

# T√≠tulo
st.title("HeatGlass")
st.write("An√°lise inteligente de liga√ß√µes: temperatura emocional, impacto no neg√≥cio e status do atendimento.")

# Sele√ß√£o do modelo GPT
col1, col2 = st.columns(2)
with col1:
    modelo_gpt = st.selectbox(
        "Selecione o modelo de IA:",
        ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"],
        index=0
    )
    
with col2:
    st.write("")  # Espa√ßo em branco para alinhar com o campo acima
    st.write("O modelo selecionado afeta a qualidade da an√°lise.")

# Upload de √°udio
uploaded_file = st.file_uploader("Envie o √°udio da liga√ß√£o (.mp3)", type=["mp3"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    st.audio(uploaded_file, format='audio/mp3')

    if st.button("üîç Analisar Atendimento"):
        # Transcri√ß√£o via Whisper
        with st.spinner("Transcrevendo o √°udio..."):
            with open(tmp_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            transcript_text = transcript.text

        with st.expander("Ver transcri√ß√£o completa"):
            st.code(transcript_text, language="markdown")

        # Defini√ß√£o do prompt MELHORADO
        prompt_template = """
        Voc√™ √© um especialista em avalia√ß√£o de atendimento ao cliente para a Carglass. Avalie APENAS o que pode ser verificado pela transcri√ß√£o do √°udio a seguir, sem fazer suposi√ß√µes sobre o que aconteceu na tela do atendente.

        TRANSCRI√á√ÉO:
        """{{}}"""

        IMPORTANTE: Voc√™ est√° avaliando SOMENTE o √°udio da liga√ß√£o. N√ÉO tem acesso √† tela do atendente e N√ÉO pode ver suas a√ß√µes no sistema. Para itens que exigem visualiza√ß√£o da tela (como "realizou tabula√ß√£o", "selecionou loja corretamente"), responda "N√£o Verific√°vel".

        INSTRU√á√ïES CR√çTICAS:
        1. Avalie SOMENTE o que √© explicitamente verific√°vel na transcri√ß√£o.
        2. A pontua√ß√£o DEVE refletir exatamente os crit√©rios cumpridos ou n√£o cumpridos.
        3. Sempre que um item for marcado como "N√£o" ou "N√£o Verific√°vel", atribua 0 pontos.
        4. Quando um item for marcado como "Parcial", atribua metade dos pontos dispon√≠veis.
        5. Calcule a pontua√ß√£o total como a soma exata dos pontos obtidos, sem arredondamentos.
        6. Use APENAS as classifica√ß√µes permitidas para cada campo.
        7. Analise o **tom geral da conversa** e o **comportamento do cliente**. Identifique palavras-chave, frases ou padr√µes de fala que indiquem emo√ß√µes espec√≠ficas (positivas ou negativas), mesmo que n√£o declaradas explicitamente. Considere a progress√£o da conversa: ela se tornou mais tensa ou mais calma ao longo do tempo?

        Retorne um JSON com os seguintes campos:

        {{
          "temperatura": {{
            "classificacao": "Calma/Neutra/Tensa/Muito Tensa", 
            "justificativa": "[Avalie a temperatura emocional predominante da intera√ß√£o, considerando tanto as falas do cliente quanto as do atendente. Justifique sua classifica√ß√£o citando trechos espec√≠ficos da transcri√ß√£o que evidenciem o sentimento. Preste aten√ß√£o especial a sinais de frustra√ß√£o, impaci√™ncia, sarcasmo, tom de voz elevado (inferido do texto), ou qualquer indica√ß√£o de conflito ou desconforto. Ex: Cliente demonstrou impaci√™ncia ao dizer '...'. A atendente pareceu n√£o compreender a solicita√ß√£o inicial, levando a repeti√ß√µes.]",
            "definicoes_temperatura": {{
                "Calma": "Intera√ß√£o fluida, cordial, sem sinais de tens√£o, frustra√ß√£o ou discord√¢ncia significativa. Cliente e atendente demonstram paci√™ncia e coopera√ß√£o.",
                "Neutra": "Intera√ß√£o predominantemente informativa, sem forte carga emocional positiva ou negativa. Pode haver pequenas d√∫vidas ou hesita√ß√µes, mas sem escalada para conflito.",
                "Tensa": "Presen√ßa de sinais de impaci√™ncia, frustra√ß√£o leve, discord√¢ncias n√£o resolvidas rapidamente, ou um tom de voz que sugere irrita√ß√£o por parte de um ou ambos os interlocutores. Pode haver repeti√ß√£o de perguntas ou afirma√ß√µes de forma enf√°tica.",
                "Muito Tensa": "Conflito aberto, reclama√ß√µes diretas e contundentes sobre o servi√ßo, a empresa ou o atendente. Sarcasmo evidente, amea√ßas de escalonamento, ou linguagem que indique forte insatisfa√ß√£o e hostilidade. A comunica√ß√£o √© dif√≠cil e pouco produtiva."
            }}
          }},
          "impacto_comercial": {{ 
            "percentual": [0-100], 
            "faixa": "Baixo/Moderado/Alto", 
            "justificativa": "[Ao definir o percentual e a faixa de impacto comercial, leve em considera√ß√£o a temperatura emocional da liga√ß√£o e a satisfa√ß√£o final do cliente. Intera√ß√µes muito negativas, mesmo que curtas, podem ter alto impacto comercial devido ao risco de perda do cliente ou dano √† reputa√ß√£o.]"
          }},
          "status_final": {{
            "satisfacao": "Satisfeito/Parcialmente Satisfeito/Insatisfeito", 
            "risco": "Baixo/M√©dio/Alto", 
            "desfecho": "Positivo/Neutro/Negativo",
            "justificativa_satisfacao": "[Avalie o n√≠vel de satisfa√ß√£o do cliente ao final da intera√ß√£o, com base em suas declara√ß√µes expl√≠citas e impl√≠citas, tom de voz (inferido) e a resolu√ß√£o (ou n√£o) de seus problemas/quest√µes. Justifique sua classifica√ß√£o com evid√™ncias da transcri√ß√£o. Ex: Cliente afirmou 'n√£o est√° tudo bem' e criticou a empresa.]",
            "definicoes_satisfacao": {{
                "Satisfeito": "Cliente expressa contentamento claro, agradece de forma genu√≠na, e seus problemas parecem ter sido resolvidos a contento. N√£o h√° resqu√≠cios de frustra√ß√£o.",
                "Parcialmente Satisfeito": "O problema principal pode ter sido encaminhado, mas o cliente ainda demonstra alguma hesita√ß√£o, d√∫vida, ou resqu√≠cio de insatisfa√ß√£o com parte do processo ou da intera√ß√£o. Pode haver agradecimentos protocolares, mas sem entusiasmo.",
                "Insatisfeito": "Cliente expressa claramente descontentamento, frustra√ß√£o, ou irrita√ß√£o. O problema n√£o foi resolvido a contento, ou a experi√™ncia de atendimento foi negativa. Pode haver reclama√ß√µes diretas, tom agressivo, ou finaliza√ß√£o abrupta da chamada pelo cliente."
            }}
          }},
          "checklist": [
            {{"item": 1, "criterio": "Atendeu a liga√ß√£o prontamente, dentro de 5 seg. e utilizou a sauda√ß√£o correta com as t√©cnicas do atendimento encantador?", "pontos": [valor num√©rico], "resposta": "Sim/Parcial/N√£o/N√£o Verific√°vel", "justificativa": "..."}},
            {{ "item": 2, "criterio": "Confirmou verbalmente o hist√≥rico de utiliza√ß√µes do cliente?", "pontos": [valor num√©rico], "resposta": "Sim/N√£o/N√£o Verific√°vel", "justificativa": "..."}} 
            # ... (restante do checklist permanece o mesmo, adicionei retic√™ncias para brevidade aqui, mas no c√≥digo real ele continua)
          ],
          "criterios_eliminatorios": [
            {{"criterio": "Ofereceu/garantiu algum servi√ßo que o cliente n√£o tinha direito?", "ocorreu": true/false, "justificativa": "..."}},
            {{"criterio": "Atendente forneceu informa√ß√µes ou orienta√ß√µes incorretas sobre a garantia do fabricante do ve√≠culo (ex: sugerir que acionar um servi√ßo da Carglass poderia afetar a garantia de f√°brica)?", "ocorreu": true/false, "justificativa": "[Se ocorreu, detalhar a orienta√ß√£o incorreta fornecida.]"}}
            # ... (restante dos crit√©rios eliminat√≥rios permanece o mesmo)
          ],
          "uso_script": {{"status": "completo/parcial/n√£o utilizado", "justificativa": "..."}},
          "pontuacao_total": [soma exata dos pontos],
          "resumo_geral": "[No campo resumo_geral, forne√ßa uma s√≠ntese concisa da liga√ß√£o, destacando os pontos principais discutidos, a experi√™ncia emocional do cliente, os problemas levantados, as solu√ß√µes oferecidas (se houver) e o desfecho da intera√ß√£o. O resumo deve refletir tanto os aspectos t√©cnicos quanto os emocionais.]"
        }}

        CHECKLIST DETALHADO (Total: 100 pontos):
        1. Atendeu a liga√ß√£o prontamente e utilizou a sauda√ß√£o correta? (10 pts)
           - "Sim" (10 pts): Sauda√ß√£o completa com nome e empresa, seguida de oferta de ajuda
           - "Parcial" (5 pts): Sauda√ß√£o incompleta 
           - "N√£o" (0 pts): Sem sauda√ß√£o adequada

        2. Confirmou verbalmente o hist√≥rico de utiliza√ß√µes do cliente? (7 pts)
           - "Sim" (7 pts): Mencionou ou perguntou diretamente sobre hist√≥rico de utiliza√ß√µes
           - "N√£o" (0 pts): N√£o mencionou hist√≥rico de utiliza√ß√£o

        3. Solicitou verbalmente 2 telefones para contato e confirmou outros dados? (6 pts)
           - "Sim" (6 pts): Solicitou explicitamente dois n√∫meros de telefone diferentes
           - "Parcial" (3 pts): Solicitou apenas um telefone ou n√£o confirmou segundo n√∫mero
           - "N√£o" (0 pts): N√£o solicitou n√∫mero de telefone

        4. Verbalizou COMPLETAMENTE o script da LGPD? (2 pts)
           - "Sim" (2 pts): Mencionou tratamento de dados pessoais conforme LGPD e compartilhamento
           - "N√£o" (0 pts): N√£o mencionou LGPD ou mencionou apenas parcialmente
           - Script LGPD refer√™ncia: "Informo que seus dados pessoais ser√£o tratados para a finalidade espec√≠fica de presta√ß√£o dos servi√ßos contratados, incluindo os dados sens√≠veis, se necess√°rio, conforme a Lei Geral de Prote√ß√£o de Dados. Podemos compartilhar seus dados com parceiros comerciais envolvidos na presta√ß√£o dos nossos servi√ßos."

        5. Utilizou a t√©cnica do eco para confirmar informa√ß√µes coletadas? (5 pts)
           - "Sim" (5 pts): Repetiu informa√ß√µes fornecidas pelo cliente para confirmar
           - "Parcial" (2.5 pts): Usou a t√©cnica parcialmente, apenas com algumas informa√ß√µes
           - "N√£o" (0 pts): N√£o repetiu informa√ß√µes para confirmar

        6. Escutou atentamente, evitando solicita√ß√µes em duplicidade? (3 pts)
           - "Sim" (3 pts): N√£o pediu a mesma informa√ß√£o mais de uma vez sem justificativa
           - "N√£o" (0 pts): Solicitou a mesma informa√ß√£o repetidamente

        7. Demonstrou verbalmente dom√≠nio sobre o produto/servi√ßo? (5 pts)
           - "Sim" (5 pts): Explicou procedimentos com seguran√ßa e conhecimento
           - "Parcial" (2.5 pts): Demonstrou conhecimento limitado ou inseguran√ßa
           - "N√£o" (0 pts): Demonstrou falta de conhecimento ou forneceu informa√ß√µes incorretas

        8. Se precisou de ajuda, mencionou consulta ao manual? (2 pts)
           - "Sim" (2 pts): Mencionou consulta ao manual OU n√£o precisou de ajuda
           - "N√£o" (0 pts): Precisou de ajuda e n√£o mencionou consulta ao manual
           - "N√£o Verific√°vel" (0 pts): N√£o √© poss√≠vel determinar se precisou de ajuda

        9. Confirmou verbalmente informa√ß√µes completas sobre o dano no ve√≠culo? (10 pts)
           - "Sim" (10 pts): Perguntou sobre detalhes espec√≠ficos do dano (localiza√ß√£o, tamanho, etc.)
           - "Parcial" (5 pts): Perguntou apenas informa√ß√µes b√°sicas sobre o dano
           - "N√£o" (0 pts): N√£o perguntou detalhes sobre o dano

        10. Confirmou verbalmente data e motivo da quebra e demais detalhes do dano? (10 pts)
            - "Sim" (10 pts): Perguntou especificamente sobre quando e como ocorreu o dano
            - "Parcial" (5 pts): Perguntou apenas data OU motivo, mas n√£o ambos
            - "N√£o" (0 pts): N√£o perguntou sobre data e motivo

        11. Confirmou verbalmente cidade para atendimento e discutiu op√ß√µes de loja? (10 pts)
            - "Sim" (10 pts): Confirmou a cidade E discutiu op√ß√µes de lojas
            - "Parcial" (5 pts): Confirmou apenas a cidade sem discutir op√ß√µes
            - "N√£o" (0 pts): N√£o confirmou cidade nem discutiu op√ß√µes

        12. Comunica√ß√£o eficaz, sem g√≠rias, informando aus√™ncias na linha? (5 pts)
            - "Sim" (5 pts): Comunica√ß√£o clara, profissional e informou aus√™ncias
            - "Parcial" (2.5 pts): Comunica√ß√£o geralmente boa, mas com falhas pontuais
            - "N√£o" (0 pts): Uso de g√≠rias ou n√£o informou aus√™ncias na linha

        13. Verificou verbalmente se d√∫vidas foram sanadas? (6 pts)
            - "Sim" (6 pts): Perguntou explicitamente se havia mais d√∫vidas/quest√µes
            - "N√£o" (0 pts): N√£o verificou se o cliente tinha mais d√∫vidas

        14. Realizou o script de encerramento completo? (15 pts)
            - "Sim" (15 pts): Utilizou TODOS os elementos do script
            - "Parcial" (7.5 pts): Utilizou parte do script (pelo menos 3 elementos)
            - "N√£o" (0 pts): Utilizou menos de 3 elementos do script
            - Elementos do script:
              a) Informou sobre o envio de links no WhatsApp
              b) Mencionou sobre a franquia a ser paga
              c) Informou sobre a pesquisa de satisfa√ß√£o
              d) Agradeceu e desejou um bom dia/tarde/noite
              e) Mencionou o nome da empresa no encerramento
        """

        # An√°lise via OpenAI
        with st.spinner("Analisando a transcri√ß√£o com IA..."):
            try:
                prompt = prompt_template.format(transcript_text)
                response = client.chat.completions.create(
                    model=modelo_gpt,
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um especialista em avalia√ß√£o de atendimento ao cliente."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.2 # Baixa temperatura para respostas mais consistentes e factuais
                )
                analysis_text = response.choices[0].message.content
                
                # Limpeza de poss√≠vel formata√ß√£o markdown no JSON
                if analysis_text.strip().startswith("```json"):
                    analysis_text = analysis_text.strip()[7:-3].strip()
                elif analysis_text.strip().startswith("```"):
                    analysis_text = analysis_text.strip()[3:-3].strip()

                analysis_data = json.loads(analysis_text)

                st.subheader("Resultado da An√°lise da IA")

                # Exibi√ß√£o da Temperatura Emocional
                temp_info = analysis_data.get("temperatura", {})
                temp_class = get_temp_class(temp_info.get("classificacao", ""))
                st.markdown(f"<div class='status-box'><b>Temperatura Emocional:</b> <span class='{temp_class}'>{temp_info.get('classificacao', 'N/A')}</span><br><b>Justificativa:</b> {temp_info.get('justificativa', 'N/A')}</div>", unsafe_allow_html=True)

                # Exibi√ß√£o do Impacto Comercial
                impact_info = analysis_data.get("impacto_comercial", {})
                st.markdown(f"<div class='status-box'><b>Impacto Comercial:</b> {impact_info.get('percentual', 'N/A')}% ({impact_info.get('faixa', 'N/A')})<br><b>Justificativa:</b> {impact_info.get('justificativa', 'N/A')}</div>", unsafe_allow_html=True)

                # Exibi√ß√£o do Status Final
                final_info = analysis_data.get("status_final", {})
                st.markdown(f"<div class='status-box'><b>Status Final:</b><br>Satisfa√ß√£o do Cliente: {final_info.get('satisfacao', 'N/A')}<br>Risco: {final_info.get('risco', 'N/A')}<br>Desfecho: {final_info.get('desfecho', 'N/A')}</div>", unsafe_allow_html=True)

                # Exibi√ß√£o do Uso do Script de Encerramento
                script_info = analysis_data.get("uso_script", {})
                script_class = get_script_status_class(script_info.get("status", ""))
                st.markdown(f"<div class='{script_class}'><b>Uso do Script de Encerramento:</b> {script_info.get('status', 'N/A')}<br><b>Justificativa:</b> {script_info.get('justificativa', 'N/A')}</div>", unsafe_allow_html=True)
                
                # Exibi√ß√£o da Pontua√ß√£o Total
                total_score = analysis_data.get("pontuacao_total", "N/A")
                st.markdown(f"<div class='status-box'><b>Pontua√ß√£o Total:</b> {total_score} / 100 pontos</div>", unsafe_allow_html=True)

                # Exibi√ß√£o do Resumo Geral
                st.markdown(f"<div class='result-box'><b>Resumo Geral:</b><br>{analysis_data.get('resumo_geral', 'N/A')}</div>", unsafe_allow_html=True)
                
                # Exibi√ß√£o dos Crit√©rios Eliminat√≥rios
                eliminatorios = analysis_data.get("criterios_eliminatorios", [])
                if eliminatorios:
                    st.subheader("Crit√©rios Eliminat√≥rios")
                    for criterio in eliminatorios:
                        ocorreu_text = "Sim" if criterio.get("ocorreu") else "N√£o"
                        st.markdown(f"<div class='criterio-eliminatorio'><b>Crit√©rio:</b> {criterio.get('criterio', 'N/A')}<br><b>Ocorreu:</b> {ocorreu_text}<br><b>Justificativa:</b> {criterio.get('justificativa', 'N/A')}</div>", unsafe_allow_html=True)
                
                # Exibi√ß√£o do Checklist
                st.subheader("Checklist Detalhado da Avalia√ß√£o")
                checklist_items = analysis_data.get("checklist", [])
                for item in checklist_items:
                    resposta = str(item.get("resposta", ""))
                    item_class = ""
                    if resposta.lower() == "sim": item_class = "criterio-sim"
                    elif resposta.lower() == "n√£o": item_class = "criterio-nao"
                    elif resposta.lower() == "parcial": item_class = "criterio-parcial"
                    elif resposta.lower() == "n√£o verific√°vel": item_class = "criterio-nao-verificavel"
                    
                    st.markdown(f"<div class='{item_class}'><b>Item {item.get('item', '')}:</b> {item.get('criterio', 'N/A')} ({item.get('pontos', 0)} pts)<br><b>Resposta:</b> {resposta}<br><b>Justificativa:</b> {item.get('justificativa', 'N/A')}</div>", unsafe_allow_html=True)

                # Gera√ß√£o e download do PDF
                pdf_bytes = create_pdf(analysis_data, transcript_text, modelo_gpt)
                st.markdown(get_pdf_download_link(pdf_bytes, f"Relatorio_HeatGlass_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"), unsafe_allow_html=True)

            except json.JSONDecodeError as e:
                st.error(f"Erro ao decodificar a resposta JSON da IA: {e}")
                st.text_area("Resposta da IA (com erro de JSON):", analysis_text, height=200)
            except Exception as e:
                st.error(f"Ocorreu um erro durante a an√°lise da IA: {e}")
                st.text_area("Resposta da IA (se dispon√≠vel):", analysis_text if 'analysis_text' in locals() else "Nenhuma resposta da IA dispon√≠vel", height=200)

    # Limpa o arquivo tempor√°rio
    import os
    if os.path.exists(tmp_path):
        os.unlink(tmp_path)
