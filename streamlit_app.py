import streamlit as st
# Configura√ß√µes da p√°gina - DEVE ser a primeira chamada Streamlit
st.set_page_config(page_title="HeatGlass", page_icon="üî¥", layout="centered")

from openai import OpenAI
import tempfile
import re
import json
import base64
from datetime import datetime
from fpdf import FPDF

# Inicializa o novo cliente da OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Fun√ß√£o para criar PDF
def create_pdf(analysis, transcript_text, model_name):
    pdf = FPDF()
    pdf.add_page()
    
    # Configura√ß√µes de fonte
    pdf.set_font("Arial", "B", 16)
    
    # Cabe√ßalho
    pdf.set_fill_color(193, 0, 0)
    pdf.set_text_color(255, 255, 255)
    pdf.cell(0, 10, "HeatGlass - Relat√≥rio de Atendimento", 1, 1, "C", True)
    pdf.ln(5)
    
    # Informa√ß√µes gerais
    pdf.set_text_color(0, 0, 0)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, f"Data da an√°lise: {datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 1)
    pdf.cell(0, 10, f"Modelo utilizado: {model_name}", 0, 1)
    pdf.ln(5)
    
    # Status Final
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Status Final", 0, 1)
    pdf.set_font("Arial", "", 12)
    final = analysis.get("status_final", {})
    pdf.cell(0, 10, f"Cliente: {final.get('satisfacao', 'N/A')}", 0, 1)
    pdf.cell(0, 10, f"Desfecho: {final.get('desfecho', 'N/A')}", 0, 1)
    pdf.cell(0, 10, f"Risco: {final.get('risco', 'N/A')}", 0, 1)
    pdf.ln(5)
    
    # Script de Encerramento
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Script de Encerramento", 0, 1)
    pdf.set_font("Arial", "", 12)
    script_info = analysis.get("uso_script", {})
    pdf.cell(0, 10, f"Status: {script_info.get('status', 'N/A')}", 0, 1)
    pdf.multi_cell(0, 10, f"Justificativa: {script_info.get('justificativa', 'N/A')}")
    pdf.ln(5)
    
    # Pontua√ß√£o Total
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Pontua√ß√£o Total", 0, 1)
    pdf.set_font("Arial", "B", 12)
    total = analysis.get("pontuacao_total", "N/A")
    pdf.cell(0, 10, f"{total} pontos de 81", 0, 1)
    pdf.ln(5)
    
    # Resumo Geral
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Resumo Geral", 0, 1)
    pdf.set_font("Arial", "", 12)
    pdf.multi_cell(0, 10, analysis.get("resumo_geral", "N/A"))
    pdf.ln(5)
    
    # Checklist (nova p√°gina)
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Checklist T√©cnico", 0, 1)
    pdf.ln(5)
    
    # Itens do checklist
    checklist = analysis.get("checklist", [])
    for item in checklist:
        item_num = item.get('item', '')
        criterio = item.get('criterio', '')
        pontos = item.get('pontos', 0)
        resposta = str(item.get('resposta', ''))
        justificativa = item.get('justificativa', '')
        
        pdf.set_font("Arial", "B", 12)
        pdf.multi_cell(0, 10, f"{item_num}. {criterio} ({pontos} pts)")
        pdf.set_font("Arial", "", 12)
        pdf.cell(0, 10, f"Resposta: {resposta}", 0, 1)
        pdf.multi_cell(0, 10, f"Justificativa: {justificativa}")
        pdf.ln(5)
    
    # Transcri√ß√£o na √∫ltima p√°gina
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Transcri√ß√£o da Liga√ß√£o", 0, 1)
    pdf.set_font("Arial", "", 10)
    pdf.multi_cell(0, 10, transcript_text)
    
    return pdf.output(dest="S").encode("latin1")

# Fun√ß√£o para criar link de download do PDF
def get_pdf_download_link(pdf_bytes, filename):
    b64 = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">Baixar Relat√≥rio em PDF</a>'
    return href

# Fun√ß√£o para extrair JSON v√°lido da resposta
def extract_json(text):
    # Procura pelo primeiro '{' e √∫ltimo '}'
    start_idx = text.find('{')
    end_idx = text.rfind('}')
    
    if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
        json_str = text[start_idx:end_idx+1]
        try:
            # Verifica se √© um JSON v√°lido
            return json.loads(json_str)
        except:
            # Se n√£o for, tenta encontrar o JSON de outras formas
            pass
    
    # Tenta usar express√£o regular para encontrar um bloco JSON
    import re
    json_pattern = r'\{(?:[^{}]|(?R))*\}'
    matches = re.findall(json_pattern, text, re.DOTALL)
    if matches:
        for match in matches:
            try:
                return json.loads(match)
            except:
                continue
    
    # Se tudo falhar, lan√ßa um erro detalhado
    raise ValueError(f"N√£o foi poss√≠vel extrair JSON v√°lido da resposta: {text[:100]}...")

# Estilo visual
st.markdown("""
<style>
h1, h2, h3 {
    color: #C10000 !important;
}
.result-box {
    background-color: #ffecec;
    padding: 1em;
    border-left: 5px solid #C10000;
    border-radius: 6px;
    font-size: 1rem;
    white-space: pre-wrap;
    line-height: 1.5;
}
.stButton>button {
    background-color: #C10000;
    color: white;
    font-weight: 500;
    border-radius: 6px;
    padding: 0.4em 1em;
    border: none;
}
.status-box {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #ffecec;
    border: 1px solid #C10000;
}
.script-usado {
    background-color: #e6ffe6;
    padding: 10px;
    border-left: 5px solid #00C100;
    border-radius: 6px;
    margin-bottom: 10px;
}
.script-nao-usado {
    background-color: #ffcccc;
    padding: 10px;
    border-left: 5px solid #FF0000;
    border-radius: 6px;
    margin-bottom: 10px;
}
.criterio-sim {
    background-color: #e6ffe6;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #00C100;
}
.criterio-nao {
    background-color: #ffcccc;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #FF0000;
}
.progress-high {
    color: #00C100;
}
.progress-medium {
    color: #FFD700;
}
.progress-low {
    color: #FF0000;
}
.criterio-eliminatorio {
    background-color: #ffcccc;
    padding: 10px;
    border-radius: 6px;
    margin-top: 20px;
    border: 2px solid #FF0000;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para determinar classe de progresso
def get_progress_class(value):
    if value >= 70:
        return "progress-high"
    elif value >= 50:
        return "progress-medium"
    else:
        return "progress-low"

# Fun√ß√£o para verificar status do script
def get_script_status_class(status):
    if status.lower() == "completo" or status.lower() == "sim":
        return "script-usado"
    else:
        return "script-nao-usado"

# Modelo fixo: GPT-4 Turbo
modelo_gpt = "gpt-4-turbo"

# T√≠tulo
st.title("HeatGlass")
st.write("An√°lise inteligente de liga√ß√µes: avalia√ß√£o de atendimento ao cliente e conformidade com processos.")

# Upload de √°udio
uploaded_file = st.file_uploader("Envie o √°udio da liga√ß√£o (.mp3)", type=["mp3"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    st.audio(uploaded_file, format='audio/mp3')

    if st.button("üîç Analisar Atendimento"):
        # Transcri√ß√£o via Whisper
        with st.spinner("Transcrevendo o √°udio..."):
            with open(tmp_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            transcript_text = transcript.text

        with st.expander("Ver transcri√ß√£o completa"):
            st.code(transcript_text, language="markdown")

        # Prompt - Usando o checklist e instru√ß√µes originais, mas removendo temperatura/impacto
        prompt = f"""
Voc√™ √© um especialista em atendimento ao cliente. Avalie a transcri√ß√£o a seguir:

TRANSCRI√á√ÉO:
\"\"\"{transcript_text}\"\"\"

Retorne APENAS um JSON com os seguintes campos, sem texto adicional antes ou depois:

{{
  "status_final": {{"satisfacao": "...", "risco": "...", "desfecho": "..."}},
  "checklist": [
    {{"item": 1, "criterio": "Atendeu a liga√ß√£o prontamente, dentro de 5 seg. e utilizou a sauda√ß√£o correta com as t√©cnicas do atendimento encantador?", "pontos": 10, "resposta": "...", "justificativa": "..."}},
    ...
  ],
  "criterios_eliminatorios": [
    {{"criterio": "Ofereceu/garantiu algum servi√ßo que o cliente n√£o tinha direito?", "ocorreu": true/false, "justificativa": "..."}},
    ...
  ],
  "uso_script": {{"status": "completo/parcial/n√£o utilizado", "justificativa": "..."}},
  "pontuacao_total": ...,
  "resumo_geral": "..."
}}

You are a specialized customer service analyst. Analyze the Portuguese transcript with ABSOLUTE RIGOR.
MANDATORY SCORING LOGIC:

Default assumption: All items start as "NO" until explicitly proven in transcript
Scoring rule: Only add points for items marked as "yes"
Zero tolerance: If the answer is "no", assign 0 points
Never display 81 points by default
Final score = sum of all "yes" items only

VALIDATION PROCESS:

Read transcript completely first
For each checklist item: Find explicit evidence before marking "yes"
Cross-validation: Re-check items 2 and 6 using specific criteria below
Final verification: Ensure total score reflects only "yes" items


TRANSCRIPT TO ANALYZE:
{transcript_text}

CHECKLIST (Portuguese content - 81 pts totais):

Atendeu a liga√ß√£o prontamente, dentro de 5 seg. e utilizou a sauda√ß√£o correta com as t√©cnicas do atendimento encantador? (10 Pontos)
Confirmou os dados do cadastro e pediu 2 telefones para contato? (Nome, CPF, Placa, e-mail, Ve√≠culo, Endere√ßo, etc) (6 Pontos)
Verbalizou o script da LGPD? (2 Pontos)
Utilizou a t√©cnica do eco para garantir o entendimento sobre as informa√ß√µes coletadas, evitando erros no processo e recontato do cliente? (5 Pontos)
Escutou atentamente a solicita√ß√£o do segurado evitando solicita√ß√µes em duplicidade? (3 Pontos)
Compreendeu a solicita√ß√£o do cliente em linha e demonstrou dom√≠nio sobre o produto/servi√ßo? (5 Pontos)
Confirmou as informa√ß√µes completas sobre o dano no ve√≠culo? Confirmou data e motivo da quebra, registro do item, dano na pintura e demais informa√ß√µes necess√°rias para o correto fluxo de atendimento. (tamanho da trinca, LED, Xenon, etc) - 10 Pontos
Confirmou cidade para o atendimento e selecionou corretamente a primeira op√ß√£o de loja identificada pelo sistema? (10 Pontos)
A comunica√ß√£o com o cliente foi eficaz: n√£o houve uso de g√≠rias, linguagem inadequada ou conversas paralelas? O analista informou quando ficou ausente da linha e quando retornou? (5 Pontos)
A conduta do analista foi acolhedora, com sorriso na voz, empatia e desejo verdadeiro em entender e solucionar a solicita√ß√£o do cliente? (4 Pontos)
Realizou o script de encerramento completo, informando: prazo de validade, franquia, link de acompanhamento e vistoria, e orientou que o cliente aguarde o contato para agendamento? (15 Pontos)
Orientou o cliente sobre a pesquisa de satisfa√ß√£o do atendimento? (6 Pontos)


CRITICAL VALIDATION RULES (English for accuracy):
IMPORTANT: Final score must be automatically recalculated based on points effectively assigned to each item. Even if the evaluation structure provides for a maximum of 81 points, no report should display 81 points if any item is evaluated as "no". The value displayed as "Total Score" must faithfully reflect the sum of points obtained.

INSTRU√á√ïES ADICIONAIS DE AVALIA√á√ÉO (Portuguese content):

T√©cnica do eco: Marque como "sim" somente se o atendente repetir verbalmente informa√ß√µes essenciais como telefones, placa ou CPF ap√≥s colet√°-las. O eco deve ser claro, objetivo e demonstrar valida√ß√£o do entendimento. Caso contr√°rio, marque como "n√£o".
Script LGPD: O atendente deve mencionar explicitamente que o telefone ser√° compartilhado com o prestador de servi√ßo, com √™nfase em privacidade ou consentimento. As seguintes varia√ß√µes s√£o v√°lidas:

Voc√™ permite que a nossa empresa compartilhe o seu telefone com o prestador que ir√° lhe atender?
Podemos compartilhar seu telefone com o prestador que ir√° realizar o servi√ßo?
Seu telefone pode ser informado ao prestador que ir√° realizar o servi√ßo?
O prestador pode ter acesso ao seu n√∫mero para realizar o agendamento do servi√ßo?
Podemos compartilhar seu telefone com o prestador que ir√° te atender?
Voc√™ autoriza o compartilhamento do telefone informado com o prestador que ir√° te atender?


Confirma√ß√£o de hist√≥rico: Verifique se h√° men√ß√£o expl√≠cita ao hist√≥rico de utiliza√ß√£o do servi√ßo pelo cliente. A simples localiza√ß√£o do cliente no sistema N√ÉO constitui confirma√ß√£o de hist√≥rico.
Pontua√ß√£o: Cada item n√£o realizado deve impactar estritamente a pontua√ß√£o final. Os pontos m√°ximos de cada item est√£o indicados entre par√™nteses - se marcado como "n√£o", zero pontos devem ser atribu√≠dos.
Crit√©rios eliminat√≥rios: Avalie com alto rigor - qualquer ocorr√™ncia, mesmo que sutil, deve ser marcada.
Script de encerramento: Compare literalmente com o modelo fornecido - s√≥ marque como "completo" se TODOS os elementos estiverem presentes (validade, franquia, link, pesquisa de satisfa√ß√£o e despedida).

ENHANCED VALIDATION (English for precision):

Checklist Item 2 - Data Confirmation: Mark "yes" ONLY if ALL the following are present: complete name confirmed, CPF/CNPJ requested, plate confirmed, email requested, address confirmed, exactly 2 phones collected. If ANY item is missing, mark "no".
Checklist Item 6 - Service Comprehension: Mark "yes" only if the agent correctly identified the requested service/part from the beginning, without confusion. Any misunderstanding about the service type results in "no".


CRIT√âRIOS ELIMINAT√ìRIOS (Portuguese content):
Cada um resulta em 0 pontos se ocorrer:

Ofereceu/garantiu algum servi√ßo que o cliente n√£o tinha direito?
Preencheu ou selecionou o Ve√≠culo/pe√ßa incorretos?
Agiu de forma rude, grosseira, n√£o deixando o cliente falar e/ou se alterou na liga√ß√£o?
Encerrou a chamada ou transferiu o cliente sem o seu conhecimento?
Falou negativamente sobre a Carglass, afiliados, seguradoras ou colegas de trabalho?
Forneceu informa√ß√µes incorretas ou fez suposi√ß√µes infundadas sobre garantias, servi√ßos ou procedimentos?
Comentou sobre servi√ßos de terceiros ou orientou o cliente para servi√ßos externos sem autoriza√ß√£o?

ATEN√á√ÉO: Avalie com rigor frases como "N√£o teria problema em mexer na lataria e o senhor perder a garantia?" ou "provavelmente a sua garantia √© motor e c√¢mbio".

SCRIPT DE ENCERRAMENTO CORRETO:
"obrigada por me aguardar! O seu atendimento foi gerado, e em breve receber√° dois links no whatsapp informado, para acompanhar o pedido e realizar a vistoria.
Lembrando que o seu atendimento tem uma franquia de XXX que dever√° ser paga no ato do atendimento. (acess√≥rios/RRSM - tem uma franquia que ser√° confirmada ap√≥s a vistoria).
Te ajudo com algo mais?
Ao final do atendimento ter√° uma pesquisa de Satisfa√ß√£o, a nota 5 √© a m√°xima, tudo bem?
Agrade√ßo o seu contato, tenha um excelente dia!"
Avalie se o script acima foi utilizado completamente ou n√£o foi utilizado.

OUTPUT FORMAT (English for precision):
CRITICAL: Return ONLY JSON, no additional text, no code decorators like ```json, and no additional explanations."""

        with st.spinner("Analisando a conversa..."):
            try:
                response = client.chat.completions.create(
                    model=modelo_gpt,
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um analista especializado em atendimento. Responda APENAS com o JSON solicitado, sem texto adicional, sem marcadores de c√≥digo como ```json, e sem explica√ß√µes."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    response_format={"type": "json_object"}  # For√ßa resposta em formato JSON
                )
                result = response.choices[0].message.content.strip()

                # Mostrar resultado bruto para depura√ß√£o
                with st.expander("Debug - Resposta bruta"):
                    st.code(result, language="json")
                
                # Tentar extrair e validar o JSON com a fun√ß√£o melhorada
                try:
                    if not result.startswith("{"):
                        analysis = extract_json(result)
                    else:
                        analysis = json.loads(result)
                except Exception as json_error:
                    st.error(f"Erro ao processar JSON: {str(json_error)}")
                    st.text_area("Resposta da IA:", value=result, height=300)
                    st.stop()

                # Status Final
                st.subheader("üìã Status Final")
                final = analysis.get("status_final", {})
                st.markdown(f"""
                <div class="status-box">
                <strong>Cliente:</strong> {final.get("satisfacao")}<br>
                <strong>Desfecho:</strong> {final.get("desfecho")}<br>
                <strong>Risco:</strong> {final.get("risco")}
                </div>
                """, unsafe_allow_html=True)

                # Script de Encerramento
                st.subheader("üìù Script de Encerramento")
                script_info = analysis.get("uso_script", {})
                script_status = script_info.get("status", "N√£o avaliado")
                script_class = get_script_status_class(script_status)
                
                st.markdown(f"""
                <div class="{script_class}">
                <strong>Status:</strong> {script_status}<br>
                <strong>Justificativa:</strong> {script_info.get("justificativa", "N√£o informado")}
                </div>
                """, unsafe_allow_html=True)

                # Crit√©rios Eliminat√≥rios
                st.subheader("‚ö†Ô∏è Crit√©rios Eliminat√≥rios")
                criterios_elim = analysis.get("criterios_eliminatorios", [])
                criterios_violados = False
                
                for criterio in criterios_elim:
                    if criterio.get("ocorreu", False):
                        criterios_violados = True
                        st.markdown(f"""
                        <div class="criterio-eliminatorio">
                        <strong>{criterio.get('criterio')}</strong><br>
                        {criterio.get('justificativa', '')}
                        </div>
                        """, unsafe_allow_html=True)
                
                if not criterios_violados:
                    st.success("Nenhum crit√©rio eliminat√≥rio foi violado.")

                # Checklist
                st.subheader("‚úÖ Checklist T√©cnico")
                checklist = analysis.get("checklist", [])
                total = float(re.sub(r"[^\d.]", "", str(analysis.get("pontuacao_total", "0"))))
                progress_class = get_progress_class(total)
                st.progress(min(total / 100, 1.0))
                st.markdown(f"<h3 class='{progress_class}'>{int(total)} pontos de 81</h3>", unsafe_allow_html=True)

                with st.expander("Ver Detalhes do Checklist"):
                    for item in checklist:
                        resposta = item.get("resposta", "").lower()
                        if resposta == "sim":
                            classe = "criterio-sim"
                            icone = "‚úÖ"
                        else:
                            classe = "criterio-nao"
                            icone = "‚ùå"
                        
                        st.markdown(f"""
                        <div class="{classe}">
                        {icone} <strong>{item.get('item')}. {item.get('criterio')}</strong> ({item.get('pontos')} pts)<br>
                        <em>{item.get('justificativa')}</em>
                        </div>
                        """, unsafe_allow_html=True)

                # Resumo
                st.subheader("üìù Resumo Geral")
                st.markdown(f"<div class='result-box'>{analysis.get('resumo_geral')}</div>", unsafe_allow_html=True)
                
                # Gerar PDF
                st.subheader("üìÑ Relat√≥rio em PDF")
                try:
                    pdf_bytes = create_pdf(analysis, transcript_text, modelo_gpt)
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"HeatGlass_Relatorio_{timestamp}.pdf"
                    st.markdown(get_pdf_download_link(pdf_bytes, filename), unsafe_allow_html=True)
                except Exception as pdf_error:
                    st.error(f"Erro ao gerar PDF: {str(pdf_error)}")

            except Exception as e:
                st.error(f"Erro ao processar a an√°lise: {str(e)}")
                try:
                    st.text_area("Resposta da IA:", value=response.choices[0].message.content.strip(), height=300)
                except:
                    st.text_area("N√£o foi poss√≠vel recuperar a resposta da IA", height=300)
