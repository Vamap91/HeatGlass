import streamlit as st
from openai import OpenAI
import tempfile
import re
import json

# Configura√ß√µes da p√°gina
st.set_page_config(page_title="HeatGlass", page_icon="üî¥", layout="centered")

# Estilo visual simples e vermelho discreto
st.markdown("""
<style>
h1, h2, h3 {
    color: #C10000 !important;
}
.result-box {
    background-color: #ffecec;
    padding: 1em;
    border-left: 5px solid #C10000;
    border-radius: 6px;
    font-size: 1rem;
    white-space: pre-wrap;
    line-height: 1.5;
}
.stButton>button {
    background-color: #C10000;
    color: white;
    font-weight: 500;
    border-radius: 6px;
    padding: 0.4em 1em;
    border: none;
}
.status-box {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #ffecec;
    border: 1px solid #C10000;
}
</style>
""", unsafe_allow_html=True)

# Inicializa o cliente OpenAI com a chave j√° configurada no Streamlit Secrets
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# T√≠tulo
st.title("HeatGlass")
st.write("An√°lise inteligente de liga√ß√µes: temperatura emocional, impacto no neg√≥cio e status do atendimento.")

# Upload do √°udio
uploaded_file = st.file_uploader("Envie o √°udio da liga√ß√£o (.mp3)", type=["mp3"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    st.audio(uploaded_file, format='audio/mp3')

    # Bot√£o para iniciar an√°lise
    if st.button("üîç Analisar Atendimento"):
        # Transcri√ß√£o com Whisper
        with st.spinner("Transcrevendo o √°udio..."):
            with open(tmp_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            transcript_text = transcript.text

        with st.expander("Ver transcri√ß√£o completa"):
            st.code(transcript_text, language="markdown")

        # Prompt estrat√©gico
        prompt = f"""
Voc√™ √© um especialista em atendimento ao cliente, com foco na avalia√ß√£o inteligente de liga√ß√µes telef√¥nicas. Sua miss√£o √© analisar transcri√ß√µes de √°udios e gerar um diagn√≥stico completo, seguindo quatro blocos principais:

TRANSCRI√á√ÉO DA LIGA√á√ÉO:
{transcript_text}

Por favor, fa√ßa uma an√°lise completa abordando os seguintes pontos:

1. TEMPERATURA EMOCIONAL DA LIGA√á√ÉO
- Classifique como: `Calma`, `Neutra`, `Tensa` ou `Muito Tensa`
- Justifique sua escolha com base no tom do cliente e do atendente
- Avalie linguagem emocional, ritmo da conversa e palavras-chave de tens√£o

2. IMPACTO COMERCIAL
- De 0% a 100%, qual o impacto desta liga√ß√£o para o neg√≥cio?
- Considere: postura do atendente, humor do cliente, resultado final
- Classifique a nota dentro das faixas:
  * 0-25% ‚Üí Cr√≠tico üî¥
  * 26-50% ‚Üí Baixo üü†
  * 51-70% ‚Üí Razo√°vel üü°
  * 71-85% ‚Üí Positivo üü¢
  * 86-100% ‚Üí Excelente üü©

3. STATUS FINAL DO ATENDIMENTO
- O cliente ficou satisfeito?
- Houve risco de perda ou fechamento?
- Qual foi o desfecho: resolvido, pendente ou insatisfat√≥rio?

4. CHECKLIST T√âCNICO DE ATENDIMENTO (Pontua√ß√£o Total = 100 pts)
Para cada item abaixo, responda `Sim` ou `N√£o` com uma breve justificativa.

1. Sauda√ß√£o inicial adequada (10 pts)
2. Confirmou hist√≥rico do cliente (7 pts)
3. Solicitou dois telefones logo no in√≠cio (6 pts)
4. Verbalizou o script da LGPD (2 pts)
5. Usou a t√©cnica do eco (valida√ß√£o) (5 pts)
6. Escutou com aten√ß√£o, sem repeti√ß√µes desnecess√°rias (3 pts)
7. Demonstrou dom√≠nio sobre o servi√ßo (5 pts)
8. Consultou o manual antes de pedir ajuda (2 pts)
9. Confirmou corretamente o ve√≠culo e ano (5 pts)
10. Perguntou data e motivo do dano (5 pts)
11. Confirmou cidade do cliente (3 pts)
12. Selecionou a primeira loja sugerida no sistema (5 pts)
13. Explicou link de acompanhamento claramente (3 pts)
14. Informou prazo de retorno e validade da OS (5 pts)
15. Registrou a liga√ß√£o corretamente no mesmo pedido (5 pts)
16. Tabula√ß√£o correta com c√≥digo correspondente (5 pts)
17. Fez encerramento com todas as orienta√ß√µes finais (10 pts)
18. Informou sobre pesquisa de satisfa√ß√£o (CSAT) (6 pts)

Apresente sua an√°lise em formato JSON, com a seguinte estrutura:
{
    "temperatura": {
        "classificacao": "classifica√ß√£o aqui",
        "justificativa": "justificativa aqui"
    },
    "impacto_comercial": {
        "percentual": n√∫mero aqui,
        "faixa": "faixa aqui com emoji",
        "justificativa": "justificativa aqui"
    },
    "status_final": {
        "satisfacao": "satisfeito/n√£o satisfeito",
        "risco": "descri√ß√£o do risco",
        "desfecho": "resolvido/pendente/insatisfat√≥rio"
    },
    "checklist": [
        {
            "item": 1,
            "criterio": "Sauda√ß√£o inicial adequada",
            "pontos": 10,
            "resposta": "Sim/N√£o",
            "justificativa": "justificativa aqui"
        },
        ...continuar para todos os 18 itens
    ],
    "pontuacao_total": n√∫mero aqui,
    "resumo_geral": "resumo textual da an√°lise completa"
}
"""

        # An√°lise com GPT-4
        with st.spinner("Analisando a conversa..."):
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um analista especializado em avaliar atendimentos telef√¥nicos."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                response_format={"type": "json_object"}
            )
            analysis_text = response.choices[0].message.content
            
            try:
                # Converter para JSON
                analysis = json.loads(analysis_text)
                
                # Exibir resultados
                st.header("üìä Resultados da An√°lise")
                
                # Temperatura Emocional
                st.subheader("üå°Ô∏è Temperatura Emocional")
                temp_class = analysis['temperatura']['classificacao']
                temp_emoji = {
                    'Calma': 'üòå',
                    'Neutra': 'üòê',
                    'Tensa': 'üòü',
                    'Muito Tensa': 'üò°'
                }.get(temp_class, '‚ùì')
                
                st.markdown(f"### {temp_class} {temp_emoji}")
                st.markdown(f"**Justificativa**: {analysis['temperatura']['justificativa']}")
                
                # Impacto Comercial
                st.subheader("üíº Impacto Comercial")
                impact_pct = analysis['impacto_comercial']['percentual']
                impact_range = analysis['impacto_comercial']['faixa']
                
                # Remover poss√≠veis caracteres n√£o num√©ricos
                if isinstance(impact_pct, str):
                    impact_pct = float(re.sub(r'[^\d.]', '', impact_pct))
                
                st.progress(int(impact_pct) / 100)
                st.markdown(f"### {int(impact_pct)}% - {impact_range}")
                st.markdown(f"**Justificativa**: {analysis['impacto_comercial']['justificativa']}")
                
                # Status Final
                st.subheader("üìã Status Final do Atendimento")
                satisfacao = analysis['status_final']['satisfacao']
                desfecho = analysis['status_final']['desfecho']
                risco = analysis['status_final']['risco']
                
                satisfacao_emoji = 'üòä' if 'satisfeito' in satisfacao.lower() else '‚òπÔ∏è'
                
                st.markdown(f"""
                <div class="status-box">
                    <strong>Cliente</strong>: {satisfacao} {satisfacao_emoji}<br>
                    <strong>Desfecho</strong>: {desfecho}<br>
                    <strong>Risco</strong>: {risco}
                </div>
                """, unsafe_allow_html=True)
                
                # Pontua√ß√£o do Checklist
                st.subheader("üèÜ Checklist T√©cnico")
                total_pts = analysis['pontuacao_total']
                if isinstance(total_pts, str):
                    total_pts = float(re.sub(r'[^\d.]', '', total_pts))
                    
                st.progress(int(total_pts) / 100)
                st.markdown(f"### {int(total_pts)} pontos de 100")
                
                # Exibir itens do checklist em forma de lista expand√≠vel
                with st.expander("Ver detalhes do checklist"):
                    for item in analysis['checklist']:
                        item_num = item['item']
                        criterio = item['criterio']
                        pontos = item['pontos']
                        resposta = item['resposta']
                        justificativa = item['justificativa']
                        
                        if resposta == 'Sim':
                            st.markdown(f"‚úÖ **{item_num}. {criterio}** ({pontos} pts) - {justificativa}")
                        else:
                            st.markdown(f"‚ùå **{item_num}. {criterio}** (0 pts) - {justificativa}")
                
                # Resumo Geral
                st.subheader("üìù Resumo Geral")
                st.markdown(f"<div class='result-box'>{analysis['resumo_geral']}</div>", unsafe_allow_html=True)
                
            except Exception as e:
                st.error(f"Erro ao processar a an√°lise: {str(e)}")
                st.text(analysis_text)
