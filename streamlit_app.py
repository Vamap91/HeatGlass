import streamlit as st
from openai import OpenAI
import tempfile
import re
import json

# Configura√ß√µes da p√°gina
st.set_page_config(page_title="HeatGlass", page_icon="üî¥", layout="centered")

# Estilo visual simples e vermelho discreto
st.markdown("""
<style>
h1, h2, h3 {
    color: #C10000 !important;
}
.result-box {
    background-color: #ffecec;
    padding: 1em;
    border-left: 5px solid #C10000;
    border-radius: 6px;
    font-size: 1rem;
    white-space: pre-wrap;
    line-height: 1.5;
}
.stButton>button {
    background-color: #C10000;
    color: white;
    font-weight: 500;
    border-radius: 6px;
    padding: 0.4em 1em;
    border: none;
}
.status-box {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #ffecec;
    border: 1px solid #C10000;
}
</style>
""", unsafe_allow_html=True)

# Inicializa o cliente OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# T√≠tulo
st.title("HeatGlass")
st.write("An√°lise inteligente de liga√ß√µes: temperatura emocional, impacto no neg√≥cio e status do atendimento.")

# Upload do √°udio
uploaded_file = st.file_uploader("Envie o √°udio da liga√ß√£o (.mp3)", type=["mp3"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    st.audio(uploaded_file, format='audio/mp3')

    if st.button("üîç Analisar Atendimento"):
        # Transcri√ß√£o com Whisper
        with st.spinner("Transcrevendo o √°udio..."):
            with open(tmp_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            transcript_text = transcript.text

        with st.expander("Ver transcri√ß√£o completa"):
            st.code(transcript_text, language="markdown")

        # Prompt estrat√©gico com instru√ß√£o final refor√ßada
        prompt = f"""
Voc√™ √© um especialista em atendimento ao cliente, com foco na avalia√ß√£o inteligente de liga√ß√µes telef√¥nicas. Sua miss√£o √© analisar transcri√ß√µes de √°udios e gerar um diagn√≥stico completo, seguindo quatro blocos principais:

TRANSCRI√á√ÉO DA LIGA√á√ÉO:
{transcript_text}

Por favor, fa√ßa uma an√°lise completa abordando os seguintes pontos:

1. TEMPERATURA EMOCIONAL DA LIGA√á√ÉO
- Classifique como: `Calma`, `Neutra`, `Tensa` ou `Muito Tensa`
- Justifique sua escolha com base no tom do cliente e do atendente

2. IMPACTO COMERCIAL
- De 0% a 100%, qual o impacto desta liga√ß√£o para o neg√≥cio?
- Classifique:
  * 0-25% ‚Üí Cr√≠tico üî¥
  * 26-50% ‚Üí Baixo üü†
  * 51-70% ‚Üí Razo√°vel üü°
  * 71-85% ‚Üí Positivo üü¢
  * 86-100% ‚Üí Excelente üü©

3. STATUS FINAL DO ATENDIMENTO
- O cliente ficou satisfeito?
- Houve risco de perda ou fechamento?
- Qual foi o desfecho?

4. CHECKLIST T√âCNICO (100 pts)
Responda com Sim/N√£o e justificativa:

1. Sauda√ß√£o inicial adequada (10 pts)
2. Confirmou hist√≥rico do cliente (7 pts)
3. Solicitou dois telefones logo no in√≠cio (6 pts)
4. Verbalizou o script da LGPD (2 pts)
5. Usou a t√©cnica do eco (5 pts)
6. Escutou com aten√ß√£o, sem repeti√ß√µes desnecess√°rias (3 pts)
7. Demonstrou dom√≠nio sobre o servi√ßo (5 pts)
8. Consultou o manual antes de pedir ajuda (2 pts)
9. Confirmou corretamente o ve√≠culo e ano (5 pts)
10. Perguntou data e motivo do dano (5 pts)
11. Confirmou cidade do cliente (3 pts)
12. Selecionou a primeira loja sugerida (5 pts)
13. Explicou link de acompanhamento (3 pts)
14. Informou prazo de retorno e validade da OS (5 pts)
15. Registrou corretamente no mesmo pedido (5 pts)
16. Tabula√ß√£o correta com c√≥digo correspondente (5 pts)
17. Encerramento com todas as orienta√ß√µes finais (10 pts)
18. Informou sobre pesquisa de satisfa√ß√£o (6 pts)

Formato de resposta: JSON estruturado conforme abaixo e **n√£o adicione coment√°rios fora do JSON**:

{{
  "temperatura": {{"classificacao": "...", "justificativa": "..."}},
  "impacto_comercial": {{"percentual": ..., "faixa": "...", "justificativa": "..."}},
  "status_final": {{"satisfacao": "...", "risco": "...", "desfecho": "..."}},
  "checklist": [
    {{"item": 1, "criterio": "...", "pontos": ..., "resposta": "...", "justificativa": "..."}},
    ...
  ],
  "pontuacao_total": ...,
  "resumo_geral": "..."
}}
"""

        with st.spinner("Analisando a conversa..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um analista especializado em avaliar atendimentos telef√¥nicos."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3
                )
                analysis_text = response.choices[0].message.content.strip()

                # Valida se o retorno √© JSON
                if not analysis_text.startswith("{"):
                    raise ValueError("Resposta fora do formato JSON")

                analysis = json.loads(analysis_text)

                # Temperatura
                st.subheader("üå°Ô∏è Temperatura Emocional")
                temp = analysis.get("temperatura", {})
                temp_class = temp.get("classificacao", "Desconhecida")
                temp_emoji = {'Calma': 'üòå', 'Neutra': 'üòê', 'Tensa': 'üòü', 'Muito Tensa': 'üò°'}.get(temp_class, '‚ùì')
                st.markdown(f"### {temp_class} {temp_emoji}")
                st.markdown(f"**Justificativa:** {temp.get('justificativa', 'N√£o informada')}")

                # Impacto Comercial
                st.subheader("üíº Impacto Comercial")
                impacto = analysis.get("impacto_comercial", {})
                pct = float(re.sub(r'[^\d.]', '', str(impacto.get("percentual", "0"))))
                if 0 <= pct <= 100:
                    st.progress(pct / 100)
                st.markdown(f"### {int(pct)}% - {impacto.get('faixa', '')}")
                st.markdown(f"**Justificativa:** {impacto.get('justificativa', 'N√£o informada')}")

                # Status Final
                st.subheader("üìã Status Final")
                status = analysis.get("status_final", {})
                st.markdown(f"""
                    <div class="status-box">
                    <strong>Cliente:</strong> {status.get("satisfacao", '')}<br>
                    <strong>Desfecho:</strong> {status.get("desfecho", '')}<br>
                    <strong>Risco:</strong> {status.get("risco", '')}
                    </div>
                """, unsafe_allow_html=True)

                # Checklist
                st.subheader("‚úÖ Checklist T√©cnico")
                checklist = analysis.get("checklist", [])
                total_pts = float(re.sub(r'[^\d.]', '', str(analysis.get("pontuacao_total", 0))))
                st.progress(min(total_pts / 100, 1))
                st.markdown(f"### {int(total_pts)} pontos de 100")

                with st.expander("Ver Detalhes do Checklist"):
                    for item in checklist:
                        icone = "‚úÖ" if item.get("resposta", "").lower() == "sim" else "‚ùå"
                        st.markdown(f"{icone} **{item['item']}. {item['criterio']}** ({item['pontos']} pts) ‚Äì {item['justificativa']}")

                # Resumo
                st.subheader("üìù Resumo Geral")
                st.markdown(f"<div class='result-box'>{analysis.get('resumo_geral', '')}</div>", unsafe_allow_html=True)

            except Exception as e:
                st.error("‚ùå Ocorreu um erro na an√°lise. Verifique se a resposta do modelo est√° no formato JSON v√°lido.")
                st.text_area("Conte√∫do recebido do modelo:", value=response.choices[0].message.content, height=300)
