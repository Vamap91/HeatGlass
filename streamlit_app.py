import streamlit as st
from openai import OpenAI
import tempfile
import re
import json
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

# Configura√ß√µes da p√°gina
st.set_page_config(page_title="HeatGlass", page_icon="üîç", layout="wide")

# Estilo visual corporativo
st.markdown("""
<style>
    /* Estilos gerais */
    .main {
        background-color: #f8f9fa;
    }
    h1, h2, h3 {
        color: #343a40 !important;
    }
    
    /* Cart√µes de resultados */
    .card {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    
    /* Estilos para temperatura emocional */
    .emotion-calma {
        color: #28a745;
        font-weight: bold;
    }
    .emotion-neutra {
        color: #17a2b8;
        font-weight: bold;
    }
    .emotion-tensa {
        color: #ffc107;
        font-weight: bold;
    }
    .emotion-muito-tensa {
        color: #dc3545;
        font-weight: bold;
    }
    
    /* Barras de progresso */
    .stProgress > div > div {
        height: 20px;
        border-radius: 10px;
    }
    
    /* Checklist */
    .checklist-item {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        background-color: #f8f9fa;
    }
    .yes-item {
        border-left: 5px solid #28a745;
    }
    .no-item {
        border-left: 5px solid #dc3545;
    }
    
    /* Status */
    .status-box {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
    }
    .status-resolvido {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
    }
    .status-pendente {
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
    }
    .status-insatisfatorio {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
    }
    
    /* Bot√µes de a√ß√£o */
    .stButton>button {
        background-color: #007bff;
        color: white;
        font-weight: 500;
        border-radius: 6px;
        padding: 0.4em 1em;
        border: none;
    }
    .stButton>button:hover {
        background-color: #0069d9;
    }
</style>
""", unsafe_allow_html=True)

# Inicializa o cliente OpenAI
# Verifica se estamos no ambiente Streamlit Cloud (que usa st.secrets)
# ou em desenvolvimento local (que usa vari√°veis de ambiente)
if 'OPENAI_API_KEY' in st.secrets:
    openai_api_key = st.secrets['OPENAI_API_KEY']
else:
    openai_api_key = os.environ.get('OPENAI_API_KEY')

client = OpenAI(api_key=openai_api_key)

# Fun√ß√£o para gerar um gr√°fico de barras para o checklist
def generate_checklist_chart(checklist_items):
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Preparar dados
    items = [f"Item {item['item']}" for item in checklist_items]
    points = [item['pontos'] if item['resposta'] == 'Sim' else 0 for item in checklist_items]
    max_points = [item['pontos'] for item in checklist_items]
    
    # Criar barras
    y_pos = np.arange(len(items))
    ax.barh(y_pos, max_points, color='lightgray', height=0.6)
    ax.barh(y_pos, points, color='#4CAF50', height=0.6)
    
    # Ajustar eixos
    ax.set_yticks(y_pos)
    ax.set_yticklabels(items)
    ax.invert_yaxis()  # Para que o item 1 fique no topo
    ax.set_xlabel('Pontos')
    ax.set_title('Checklist T√©cnico de Atendimento')
    
    # Adicionar anota√ß√µes de pontua√ß√£o
    for i, v in enumerate(points):
        if v > 0:
            ax.text(v + 0.5, i, f'{v}/{max_points[i]}', va='center')
        else:
            ax.text(1, i, f'0/{max_points[i]}', va='center')
    
    plt.tight_layout()
    return fig

# Sidebar
st.sidebar.image("https://via.placeholder.com/200x100.png?text=HeatGlass", width=200)
st.sidebar.title("HeatGlass")
st.sidebar.markdown("### An√°lise Inteligente de Atendimento")

# Op√ß√µes de navega√ß√£o
page = st.sidebar.radio("Navega√ß√£o", ["An√°lise de √Åudio", "Hist√≥rico", "Configura√ß√µes"])

# Conte√∫do principal
if page == "An√°lise de √Åudio":
    st.title("üéôÔ∏è HeatGlass - An√°lise de Atendimento")
    st.write("Carregue o √°udio de uma liga√ß√£o para an√°lise autom√°tica de qualidade e impacto emocional.")
    
    # Upload do √°udio
    uploaded_file = st.file_uploader("Envie o √°udio da liga√ß√£o (.mp3)", type=["mp3"])
    
    if uploaded_file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            tmp.write(uploaded_file.read())
            tmp_path = tmp.name
    
        # Player de √°udio
        st.audio(uploaded_file, format='audio/mp3')
        
        # Bot√£o para analisar
        analyze_button = st.button("üîç Analisar Atendimento")
        
        if analyze_button:
            # Transcri√ß√£o com Whisper
            with st.spinner("Transcrevendo o √°udio..."):
                with open(tmp_path, "rb") as audio_file:
                    transcript = client.audio.transcriptions.create(
                        model="whisper-1",
                        file=audio_file
                    )
                transcript_text = transcript.text
            
            with st.expander("Ver transcri√ß√£o completa"):
                st.code(transcript_text, language="markdown")
            
            # Prompt estruturado conforme o documento de requisitos
            prompt = f"""
            Voc√™ √© um especialista em atendimento ao cliente, com foco na avalia√ß√£o inteligente de liga√ß√µes telef√¥nicas. Sua miss√£o √© analisar transcri√ß√µes de √°udios e gerar um diagn√≥stico completo, seguindo quatro blocos principais:

            TRANSCRI√á√ÉO DA LIGA√á√ÉO:
            {transcript_text}

            Por favor, fa√ßa uma an√°lise completa abordando os seguintes pontos:

            1. TEMPERATURA EMOCIONAL DA LIGA√á√ÉO
            - Classifique como: `Calma`, `Neutra`, `Tensa` ou `Muito Tensa`
            - Justifique sua escolha com base no tom do cliente e do atendente
            - Avalie linguagem emocional, ritmo da conversa e palavras-chave de tens√£o

            2. IMPACTO COMERCIAL
            - De 0% a 100%, qual o impacto desta liga√ß√£o para o neg√≥cio?
            - Considere: postura do atendente, humor do cliente, resultado final
            - Classifique a nota dentro das faixas:
              * 0-25% ‚Üí Cr√≠tico üî¥
              * 26-50% ‚Üí Baixo üü†
              * 51-70% ‚Üí Razo√°vel üü°
              * 71-85% ‚Üí Positivo üü¢
              * 86-100% ‚Üí Excelente üü©

            3. STATUS FINAL DO ATENDIMENTO
            - O cliente ficou satisfeito?
            - Houve risco de perda ou fechamento?
            - Qual foi o desfecho: resolvido, pendente ou insatisfat√≥rio?

            4. CHECKLIST T√âCNICO DE ATENDIMENTO (Pontua√ß√£o Total = 100 pts)
            Para cada item abaixo, responda `Sim` ou `N√£o` com uma breve justificativa. 
            
            1. Sauda√ß√£o inicial adequada (10 pts)
            2. Confirmou hist√≥rico do cliente (7 pts)
            3. Solicitou dois telefones logo no in√≠cio (6 pts)
            4. Verbalizou o script da LGPD (2 pts)
            5. Usou a t√©cnica do eco (valida√ß√£o) (5 pts)
            6. Escutou com aten√ß√£o, sem repeti√ß√µes desnecess√°rias (3 pts)
            7. Demonstrou dom√≠nio sobre o servi√ßo (5 pts)
            8. Consultou o manual antes de pedir ajuda (2 pts)
            9. Confirmou corretamente o ve√≠culo e ano (5 pts)
            10. Perguntou data e motivo do dano (5 pts)
            11. Confirmou cidade do cliente (3 pts)
            12. Selecionou a primeira loja sugerida no sistema (5 pts)
            13. Explicou link de acompanhamento claramente (3 pts)
            14. Informou prazo de retorno e validade da OS (5 pts)
            15. Registrou a liga√ß√£o corretamente no mesmo pedido (5 pts)
            16. Tabula√ß√£o correta com c√≥digo correspondente (5 pts)
            17. Fez encerramento com todas as orienta√ß√µes finais (10 pts)
            18. Informou sobre pesquisa de satisfa√ß√£o (CSAT) (6 pts)

            Apresente sua an√°lise em formato JSON, com a seguinte estrutura:
            {
                "temperatura": {
                    "classificacao": "classifica√ß√£o aqui",
                    "justificativa": "justificativa aqui"
                },
                "impacto_comercial": {
                    "percentual": n√∫mero aqui,
                    "faixa": "faixa aqui com emoji",
                    "justificativa": "justificativa aqui"
                },
                "status_final": {
                    "satisfacao": "satisfeito/n√£o satisfeito",
                    "risco": "descri√ß√£o do risco",
                    "desfecho": "resolvido/pendente/insatisfat√≥rio"
                },
                "checklist": [
                    {
                        "item": 1,
                        "criterio": "Sauda√ß√£o inicial adequada",
                        "pontos": 10,
                        "resposta": "Sim/N√£o",
                        "justificativa": "justificativa aqui"
                    },
                    ...continuar para todos os 18 itens
                ],
                "pontuacao_total": n√∫mero aqui,
                "resumo_geral": "resumo textual da an√°lise completa"
            }
            """

            # An√°lise com GPT-4
            with st.spinner("Analisando a conversa..."):
                response = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um analista especializado em avaliar atendimentos telef√¥nicos."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    response_format={"type": "json_object"}
                )
                analysis_text = response.choices[0].message.content
                
                try:
                    # Converter para JSON
                    analysis = json.loads(analysis_text)
                    
                    # Exibir resultados
                    st.header("üìä Resultados da An√°lise")
                    
                    # Layout em colunas
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        # Temperatura Emocional
                        st.subheader("üå°Ô∏è Temperatura Emocional")
                        temp_class = analysis['temperatura']['classificacao']
                        temp_emoji = {
                            'Calma': 'üòå',
                            'Neutra': 'üòê',
                            'Tensa': 'üòü',
                            'Muito Tensa': 'üò°'
                        }.get(temp_class, '‚ùì')
                        
                        st.markdown(f"<div class='card'><h3 class='emotion-{temp_class.lower()}'>{temp_class} {temp_emoji}</h3><p>{analysis['temperatura']['justificativa']}</p></div>", unsafe_allow_html=True)
                        
                        # Status Final
                        st.subheader("üìã Status Final do Atendimento")
                        satisfacao = analysis['status_final']['satisfacao']
                        desfecho = analysis['status_final']['desfecho']
                        risco = analysis['status_final']['risco']
                        
                        satisfacao_emoji = 'üòä' if 'satisfeito' in satisfacao.lower() else '‚òπÔ∏è'
                        desfecho_class = {
                            'resolvido': 'status-resolvido',
                            'pendente': 'status-pendente',
                            'insatisfat√≥rio': 'status-insatisfatorio'
                        }.get(desfecho.lower(), '')
                        
                        st.markdown(f"""
                        <div class='card'>
                            <div class='status-box {desfecho_class}'>
                                <h3>Desfecho: {desfecho}</h3>
                                <p><strong>Cliente:</strong> {satisfacao} {satisfacao_emoji}</p>
                                <p><strong>Risco:</strong> {risco}</p>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Resumo Geral
                        st.subheader("üìù Resumo Geral")
                        st.markdown(f"<div class='card'>{analysis['resumo_geral']}</div>", unsafe_allow_html=True)
                    
                    with col2:
                        # Impacto Comercial
                        st.subheader("üíº Impacto Comercial")
                        impact_pct = analysis['impacto_comercial']['percentual']
                        impact_range = analysis['impacto_comercial']['faixa']
                        
                        # Remover poss√≠veis caracteres n√£o num√©ricos
                        if isinstance(impact_pct, str):
                            impact_pct = float(re.sub(r'[^\d.]', '', impact_pct))
                        
                        st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                        st.progress(int(impact_pct) / 100)
                        st.markdown(f"<h3>{int(impact_pct)}% - {impact_range}</h3>", unsafe_allow_html=True)
                        st.markdown(f"<p>{analysis['impacto_comercial']['justificativa']}</p></div>", unsafe_allow_html=True)
                        
                        # Pontua√ß√£o Total do Checklist
                        st.subheader("üèÜ Pontua√ß√£o Total")
                        total_pts = analysis['pontuacao_total']
                        if isinstance(total_pts, str):
                            total_pts = float(re.sub(r'[^\d.]', '', total_pts))
                            
                        st.markdown(f"<div class='card'>", unsafe_allow_html=True)
                        st.progress(int(total_pts) / 100)
                        st.markdown(f"<h3>{int(total_pts)} pontos de 100</h3>", unsafe_allow_html=True)
                        
                        # Gerar classifica√ß√£o com base na pontua√ß√£o
                        if total_pts >= 90:
                            st.success("Excelente Atendimento ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")
                        elif total_pts >= 80:
                            st.success("√ìtimo Atendimento ‚≠ê‚≠ê‚≠ê‚≠ê")
                        elif total_pts >= 70:
                            st.warning("Bom Atendimento ‚≠ê‚≠ê‚≠ê")
                        elif total_pts >= 60:
                            st.warning("Atendimento Regular ‚≠ê‚≠ê")
                        else:
                            st.error("Atendimento Abaixo do Esperado ‚≠ê")
                        st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Checklist T√©cnico detalhado
                    st.header("üìã Checklist T√©cnico Detalhado")
                    
                    # Gerar e exibir o gr√°fico do checklist
                    checklist_chart = generate_checklist_chart(analysis['checklist'])
                    st.pyplot(checklist_chart)
                    
                    # Exibir itens do checklist em forma de lista expand√≠vel
                    with st.expander("Ver detalhes do checklist"):
                        for item in analysis['checklist']:
                            item_num = item['item']
                            criterio = item['criterio']
                            pontos = item['pontos']
                            resposta = item['resposta']
                            justificativa = item['justificativa']
                            
                            # Estilo condicional baseado na resposta
                            if resposta == 'Sim':
                                st.markdown(f"""
                                <div class="checklist-item yes-item">
                                    <strong>{item_num}. {criterio}</strong> ({pontos} pts) - ‚úÖ {resposta}
                                    <br/><small>{justificativa}</small>
                                </div>
                                """, unsafe_allow_html=True)
                            else:
                                st.markdown(f"""
                                <div class="checklist-item no-item">
                                    <strong>{item_num}. {criterio}</strong> ({pontos} pts) - ‚ùå {resposta}
                                    <br/><small>{justificativa}</small>
                                </div>
                                """, unsafe_allow_html=True)
                    
                    # Bot√µes de a√ß√£o
                    st.markdown("---")
                    col1, col2, col3 = st.columns([1, 1, 1])
                    with col1:
                        if st.button("üì• Exportar Relat√≥rio (PDF)"):
                            st.info("Fun√ß√£o de exporta√ß√£o para PDF ser√° implementada aqui")
                    with col2:
                        if st.button("üìä Salvar no Hist√≥rico"):
                            st.success("An√°lise salva no hist√≥rico com sucesso!")
                    with col3:
                        if st.button("‚úâÔ∏è Enviar por E-mail"):
                            st.info("Fun√ß√£o de envio por e-mail ser√° implementada aqui")
                
                except Exception as e:
                    st.error(f"Erro ao processar a an√°lise: {e}")
                    st.code(analysis_text)

elif page == "Hist√≥rico":
    st.title("üìö Hist√≥rico de An√°lises")
    st.info("O m√≥dulo de hist√≥rico est√° em desenvolvimento. Aqui ser√£o exibidas todas as an√°lises j√° realizadas, com filtros por data, temperatura emocional e impacto comercial.")
    
    # Mockup de tabela de hist√≥rico
    data = {
        'Data': ['15/04/2025', '14/04/2025', '12/04/2025', '10/04/2025'],
        'Atendente': ['Juliana', 'Carlos', 'M√°rcia', 'Roberto'],
        'Temperatura': ['Calma üòå', 'Tensa üòü', 'Neutra üòê', 'Muito Tensa üò°'],
        'Impacto': ['85% üü¢', '45% üü†', '67% üü°', '15% üî¥'],
        'Status': ['Resolvido', 'Pendente', 'Resolvido', 'Insatisfat√≥rio']
    }
    df = pd.DataFrame(data)
    st.dataframe(df, use_container_width=True)

elif page == "Configura√ß√µes":
    st.title("‚öôÔ∏è Configura√ß√µes")
    st.info("O m√≥dulo de configura√ß√µes est√° em desenvolvimento. Aqui ser√£o disponibilizadas op√ß√µes para personalizar a an√°lise, definir par√¢metros de IA, e gerenciar integra√ß√µes com outros sistemas.")
    
    # Mockup de configura√ß√µes
    with st.form("config_form"):
        st.subheader("Configura√ß√µes de IA")
        api_key = st.text_input("OpenAI API Key", value="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢", type="password")
        model = st.selectbox("Modelo de IA", ["GPT-4", "GPT-3.5 Turbo"])
        temperature = st.slider("Temperatura da IA", min_value=0.0, max_value=1.0, value=0.3, step=0.1)
        
        st.subheader("Configura√ß√µes de E-mail")
        email_notify = st.checkbox("Enviar notifica√ß√µes por e-mail")
        email_dest = st.text_input("E-mail para relat√≥rios")
        
        st.subheader("Configura√ß√µes de Integra√ß√£o")
        integrate_xcontact = st.checkbox("Integrar com XContact")
        auto_analysis = st.checkbox("An√°lise autom√°tica de novas liga√ß√µes")
        
        submit = st.form_submit_button("Salvar Configura√ß√µes")
        if submit:
            st.success("Configura√ß√µes salvas com sucesso!")

# Rodap√©
st.markdown("---")
st.markdown("HeatGlass v1.0 | An√°lise Inteligente de Atendimentos")
